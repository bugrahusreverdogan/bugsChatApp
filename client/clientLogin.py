# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'clientLogin.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from clientMainWindow import Ui_ClientMainWindow
from clientRegister import Ui_ClientRegisterWidget
from clientStaticHandling import StaticHandling
import asyncio
import sys
import clientWidgets

class Ui_ClientLoginWidget(object):
        

    def setupUi(self, ClientLoginWidget : clientWidgets.LoginWidget):
        
        ClientLoginWidget.setObjectName("ClientLoginWidget")
        ClientLoginWidget.resize(441, 629)
        self.emailLineEdit = QtWidgets.QLineEdit(ClientLoginWidget)
        self.emailLineEdit.setGeometry(QtCore.QRect(140, 190, 251, 27))
        self.emailLineEdit.setObjectName("emailLineEdit")
        self.emailLabel = QtWidgets.QLabel(ClientLoginWidget)
        self.emailLabel.setGeometry(QtCore.QRect(50, 200, 67, 19))
        self.emailLabel.setObjectName("emailLabel")
        self.passwordLabel = QtWidgets.QLabel(ClientLoginWidget)
        self.passwordLabel.setGeometry(QtCore.QRect(50, 270, 67, 19))
        self.passwordLabel.setObjectName("passwordLabel")
        self.passwordLineEdit = QtWidgets.QLineEdit(ClientLoginWidget)
        self.passwordLineEdit.setGeometry(QtCore.QRect(140, 260, 251, 27))
        self.passwordLineEdit.setObjectName("passwordLineEdit")
        self.loginPushButton = QtWidgets.QPushButton(ClientLoginWidget)
        self.loginPushButton.setGeometry(QtCore.QRect(220, 330, 88, 27))
        self.loginPushButton.setObjectName("loginPushButton")
        self.registerPushButton = QtWidgets.QPushButton(ClientLoginWidget)
        self.registerPushButton.setGeometry(QtCore.QRect(220, 390, 88, 27))
        self.registerPushButton.setObjectName("registerPushButton")

        self.retranslateUi(ClientLoginWidget)
        QtCore.QMetaObject.connectSlotsByName(ClientLoginWidget)
        # ui-auto codes end

        self.clientLoginWidget = ClientLoginWidget

        self.passwordLineEdit.setEchoMode(QtWidgets.QLineEdit.Password)

        self.loginPushButton.clicked.connect(self.loginButtonClicked)
        self.registerPushButton.clicked.connect(self.registerButtonClicked)

        self.loginSignal = "<<<??!login!??>>>"
         


    def retranslateUi(self, ClientLoginWidget):
        _translate = QtCore.QCoreApplication.translate
        ClientLoginWidget.setWindowTitle(_translate("ClientLoginWidget", "Client Login"))
        self.emailLabel.setText(_translate("ClientLoginWidget", "email:"))
        self.passwordLabel.setText(_translate("ClientLoginWidget", "password:"))
        self.loginPushButton.setText(_translate("ClientLoginWidget", "Login"))
        self.registerPushButton.setText(_translate("ClientLoginWidget", "Register"))


    def loginButtonClicked(self):
        
        emailText = self.emailLineEdit.text().replace(' ', '')
        passwordText = self.passwordLineEdit.text().replace(' ', '')

        if (emailText != "" and emailText != None):

            if(passwordText != "" and passwordText != None):

                message = self.loginSignal + " " + emailText + " " + passwordText
                
                hppn = False

                while(hppn == False):      
                    hppn = asyncio.run(StaticHandling.sendBufferChange(message))

                print(StaticHandling.sendBuffer)
                hppn2 = True

                while(hppn2):
                    response = StaticHandling.recvBuffer.decode('utf-8')
                    response = response.split(' ')
                    print(response)
                    if(response[0] == self.loginSignal):
                        print(response)
                        hppn2 = False
                        StaticHandling.recvBuffer = bytearray()


                if(response[1] == 'true'):
                    print("true")
                    msg = QtWidgets.QMessageBox.information(self.clientLoginWidget, "Succesful", 
                                            "Login Succesful. Welcome to Bug's chat App!",
                                                QtWidgets.QMessageBox.Ok, QtWidgets.QMessageBox.Ok)
                            
                    if msg == QtWidgets.QMessageBox.Ok:

                        self.email = emailText
                        self.clientMain = clientWidgets.ClientMainWidget()
                        self.mainWindow = Ui_ClientMainWindow()
                        self.mainWindow.setupUi(self.clientMain, self.email)
                        self.clientMain.show()
                        self.clientLoginWidget.isControlled = True
                        self.clientLoginWidget.close()

                elif(response[1] == 'false'):

                    if(response[2] == 'email'):
                        msg = QtWidgets.QMessageBox.warning(self.clientLoginWidget, "Failed", 
                                            "Login Failed. No such email address was found!",
                                                QtWidgets.QMessageBox.Ok, QtWidgets.QMessageBox.Ok)

                    else:
                        msg = QtWidgets.QMessageBox.warning(self.clientLoginWidget, "Failed", 
                                            "Login Failed. You entered the wrong password!",
                                                QtWidgets.QMessageBox.Ok, QtWidgets.QMessageBox.Ok)
            else:
                msg = QtWidgets.QMessageBox.warning(self.clientLoginWidget, "Failed", 
                                            "Login Failed. Password can not be left blank!",
                                            QtWidgets.QMessageBox.Ok, QtWidgets.QMessageBox.Ok)
        else:
            msg = QtWidgets.QMessageBox.warning(self.clientLoginWidget, "Failed", 
                                            "Login Failed. Email can not be left blank!",
                                            QtWidgets.QMessageBox.Ok, QtWidgets.QMessageBox.Ok)


    def registerButtonClicked(self):
        
        self.clientRegister = clientWidgets.RegisterWidget()
        self.registerWindow = Ui_ClientRegisterWidget()
        self.registerWindow.setupUi(self.clientRegister, self.clientLoginWidget)
        self.clientLoginWidget.isControlled = True
        self.clientRegister.show()
        self.clientLoginWidget.close()

                