# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ClientMainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import typing
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject
from clientStaticHandling import StaticHandling
from datetime import datetime
from threading import Thread, Event
from clientWidgets import ClientMainWidget
import asyncio
from clientPrivateChat import Ui_ClientPrivateChatWidget
import time

class Ui_ClientMainWindow(QtCore.QObject):


    def setupUi(self, ClientMainWindow : ClientMainWidget, email):

        ClientMainWindow.setObjectName("ClientMainWindow")
        ClientMainWindow.resize(829, 733)
        self.CommonChatTextEdit = QtWidgets.QTextEdit(ClientMainWindow)
        self.CommonChatTextEdit.setGeometry(QtCore.QRect(20, 630, 251, 51))
        self.CommonChatTextEdit.setObjectName("CommonChatTextEdit")
        self.CommonChatSendButton = QtWidgets.QPushButton(ClientMainWindow)
        self.CommonChatSendButton.setGeometry(QtCore.QRect(280, 630, 91, 51))
        self.CommonChatSendButton.setObjectName("CommonChatSendButton")
        self.CommonChatListWidget = QtWidgets.QListWidget(ClientMainWindow)
        self.CommonChatListWidget.setGeometry(QtCore.QRect(20, 40, 351, 571))
        self.CommonChatListWidget.setObjectName("CommonChatListWidget")
        self.ActionListWidget = QtWidgets.QListWidget(ClientMainWindow)
        self.ActionListWidget.setGeometry(QtCore.QRect(390, 40, 231, 571))
        self.ActionListWidget.setObjectName("ActionListWidget")
        self.OnlineListWidget = QtWidgets.QListWidget(ClientMainWindow)
        self.OnlineListWidget.setGeometry(QtCore.QRect(640, 40, 171, 571))
        self.OnlineListWidget.setObjectName("OnlineListWidget")
        self.OnlinePrivateMessage = QtWidgets.QPushButton(ClientMainWindow)
        self.OnlinePrivateMessage.setGeometry(QtCore.QRect(680, 630, 131, 51))
        self.OnlinePrivateMessage.setObjectName("OnlinePrivateMessage")
        self.commonChatLabel = QtWidgets.QLabel(ClientMainWindow)
        self.commonChatLabel.setGeometry(QtCore.QRect(20, 10, 101, 21))
        self.commonChatLabel.setTextFormat(QtCore.Qt.AutoText)
        self.commonChatLabel.setObjectName("commonChatLabel")
        self.OnlineLabel = QtWidgets.QLabel(ClientMainWindow)
        self.OnlineLabel.setGeometry(QtCore.QRect(640, 10, 67, 19))
        self.OnlineLabel.setObjectName("OnlineLabel")
        self.ActionsLabel = QtWidgets.QLabel(ClientMainWindow)
        self.ActionsLabel.setGeometry(QtCore.QRect(390, 10, 67, 19))
        self.ActionsLabel.setObjectName("ActionsLabel")

        self.retranslateUi(ClientMainWindow)
        QtCore.QMetaObject.connectSlotsByName(ClientMainWindow)

        # ui-auto codes end
        self.clientMainWindow = ClientMainWindow

        self.CommonChatSendButton.clicked.connect(self.commonSendButtonClicked)
        self.OnlinePrivateMessage.clicked.connect(self.onlinePrivateMessageClicked)

        self.email = email
        self.clientMainWindow.mail = email

        self.mainSignal = "<<<??!main!??>>>"

        self.onlines = {}
        # email: [email, name, surname]
        self.privates = {}

        self.stopEvent = Event()

        self.signalHandler = ClientSignalHandler()
        self.signalHandler.online_list_signal.connect(self.addItemToOnlineList)
        self.signalHandler.offline_list_signal.connect(self.deleteItemFromOnlineList)
        self.signalHandler.common_list_signal.connect(self.addItemToCommonList)
        self.signalHandler.action_list_signal.connect(self.addItemToActionList)
        self.signalHandler.new_private_signal.connect(self.newPrivateWidget)

        self.infoHandling()

        StaticHandling.receive_signal.connect(self.receiveHandler)
        # self.recvThread = Thread(target=self.ReceiveHandler, args=())
        # self.recvThread.daemon = True
        # self.recvThread.start()
        # # self.recvThread = Thread(target=self.recvHandler)


    def retranslateUi(self, ClientMainWindow):
        _translate = QtCore.QCoreApplication.translate
        ClientMainWindow.setWindowTitle(_translate("ClientMainWindow", "Bugra Chat App Client"))
        self.CommonChatSendButton.setText(_translate("ClientMainWindow", "Send"))
        self.OnlinePrivateMessage.setText(_translate("ClientMainWindow", "Private Message"))
        self.commonChatLabel.setText(_translate("ClientMainWindow", "Common Chat"))
        self.OnlineLabel.setText(_translate("ClientMainWindow", "Online"))
        self.ActionsLabel.setText(_translate("ClientMainWindow", "Actions"))


    def addItemToOnlineList(self, online : list):
        item = online[1] + " " + online[2]
        newOnlineItem = QtWidgets.QListWidgetItem(item)
        newOnlineItem.setData(1, online[0])
        self.OnlineListWidget.addItem(newOnlineItem)

    def deleteItemFromOnlineList(self, mail : str):
        
        count = self.OnlineListWidget.count()
        willClose = -1
        for i in range(count):
            if self.OnlineListWidget.item(i).data(1) == mail:
                willClose = i

        if willClose >= 0:
            self.OnlineListWidget.takeItem(willClose)

    def addItemToCommonList(self, item):
        newCommonItem = QtWidgets.QListWidgetItem(item)
        self.CommonChatListWidget.addItem(newCommonItem)


    def addItemToActionList(self, item : str):
        newItem = QtWidgets.QListWidgetItem(item)
        self.ActionListWidget.addItem(newItem)


    def newPrivateWidget(self, destinationClient : list):

        ClientPrivateChatWidget = QtWidgets.QWidget()
        ui = Ui_ClientPrivateChatWidget()
        ui.setupUi(ClientPrivateChatWidget, self.email, destinationClient)

        self.privates[destinationClient[0]] = [ClientPrivateChatWidget, ui]
        self.privates[destinationClient[0]][0].showNormal()
        self.privates[destinationClient[0]][1].receiveHandler()
        
    def commonSendButtonClicked(self):
        
        message = self.mainSignal + " " + "common" + " " + self.email + " "
        message += self.CommonChatTextEdit.toPlainText()

        hppn = False
        while(hppn == False):
            hppn = asyncio.run(StaticHandling.sendBufferChange(message))

        self.CommonChatTextEdit.clear()


    def onlinePrivateMessageClicked(self):
        selectedItem = self.OnlineListWidget.currentItem()

        if not selectedItem == None:
            for online in self.onlines.keys():
                if self.onlines[online][0] == selectedItem.data(1):
                    if not self.onlines[online][0] in self.privates:
                        
                        self.signalHandler.new_private_signal.emit(self.onlines[online])

                    else:
                        if not self.privates[online][0].isVisible():
                            self.privates[online][0].showNormal()
                  

    def infoHandling(self):

        message = self.mainSignal + " " + "info" + " " + self.email
        
        hppn = False

        while(hppn == False):

            hppn = asyncio.run(StaticHandling.sendBufferChange(message))

        hppn2 = True

        while(hppn2):

            response = StaticHandling.recvBuffer.decode('utf-8')
            response = response.split(' ')
            print(response)

            if(response[0] == self.mainSignal):

                if(response[1] == 'info'):

                    StaticHandling.recvBuffer = bytearray()
                    hppn2 = False
                    actionItem = QtWidgets.QListWidgetItem(response[2] + " " + "Welcome to Bug's Chat App.")
                    self.ActionListWidget.addItem(actionItem)

                    result = response[3:]
                    print(result)

                    for i in range(0, len(result)- 2, 3):
                        self.onlines[result[i]] = [result[i], result[i+1], result[i+2]]
                        item = QtWidgets.QListWidgetItem(result[i+1] + " " + result[i+2])
                        item.setData(1, self.onlines[result[i]][0])
                        self.OnlineListWidget.addItem(item)
                        print(item)


    def receiveHandler(self):
            
            response = StaticHandling.recvBuffer.decode('utf-8')
            response = response.split(' ')

            print("ben main", response)
            if(response[0] == self.mainSignal):
                print("ben main, main")
                if(response[1] == 'common'):
                    item = response[2:]
                    item = " ".join(item)
                    self.signalHandler.common_list_signal.emit(item)
                    StaticHandling.recvBuffer = bytearray()
            
                elif(response[1] == 'private'):
                    print("ben main", "private")
                    destinationMail = response[2]
                    for online in self.onlines.keys():
                        print("ben main", online, destinationMail)
                        if destinationMail == online:
                            print("ben main if'e girdim.", online, destinationMail)
                            if not self.onlines[destinationMail][0] in self.privates.keys():
                                print("ben main if not'a girdim", self.onlines[destinationMail][0])
                                self.signalHandler.new_private_signal.emit(self.onlines[destinationMail])
                                print("ben main if not'a girdim emit okey")
                                

                            else:
                                print("ben main", "else 1")
                                if not self.privates[destinationMail][0].isVisible():
                                    print("ben main", "else 2")
                                    self.privates[destinationMail][0].showNormal()
                                    self.privates[destinationMail][1].receiveHandler()
                                else:
                                    self.privates[destinationMail][1].receiveHandler()

                elif(response[1] == 'online'):
                    
                    self.onlines[response[2]] = [response[2], response[3], response[4]]
                    self.signalHandler.online_list_signal.emit(self.onlines[response[2]])

                    actionMessage = str(response[3] + " " + response[4] + " is online now.")
                    self.signalHandler.action_list_signal.emit(actionMessage)
                    StaticHandling.recvBuffer = bytearray()
                
                elif(response[1] == 'offline'):
                    
                    isInPrivate = False

                    StaticHandling.recvBuffer = bytearray()
                    closedMail = response[2]
                    self.signalHandler.offline_list_signal.emit(closedMail)
                    closedAction = self.onlines[closedMail][1] + " " + self.onlines[closedMail][2] + " is now offline."
                    self.signalHandler.action_list_signal.emit(closedAction)
                    for private in self.privates.keys():
                        if private == closedMail:
                            isInPrivate = True
                    
                    if isInPrivate:
                        self.privates[closedMail][1].stopEvent.set()
                        self.privates[closedMail][0].close()
                        del self.privates[closedMail]

                    del self.onlines[closedMail]
                            

class ClientSignalHandler(QtCore.QObject):

    action_list_signal = QtCore.pyqtSignal(str)
    online_list_signal = QtCore.pyqtSignal(list)
    offline_list_signal = QtCore.pyqtSignal(str)
    common_list_signal = QtCore.pyqtSignal(str)
    new_private_signal = QtCore.pyqtSignal(list)






