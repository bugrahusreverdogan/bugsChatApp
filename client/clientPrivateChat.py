# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'clientPrivateChat.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from threading import Thread, Event
from clientStaticHandling import StaticHandling
import asyncio
import time

class Ui_ClientPrivateChatWidget(QtCore.QObject):

    def setupUi(self, ClientPrivateChatWidget, sourceMail : str, destinationClient : list):

        ClientPrivateChatWidget.setObjectName("ClientPrivateChatWidget")
        ClientPrivateChatWidget.resize(462, 685)
        self.PrivateListWidget = QtWidgets.QListWidget(ClientPrivateChatWidget)
        self.PrivateListWidget.setGeometry(QtCore.QRect(10, 50, 441, 551))
        self.PrivateListWidget.setObjectName("PrivateListWidget")
        self.PrivateTextEdit = QtWidgets.QTextEdit(ClientPrivateChatWidget)
        self.PrivateTextEdit.setGeometry(QtCore.QRect(10, 610, 341, 71))
        self.PrivateTextEdit.setObjectName("PrivateTextEdit")
        self.PrivateSendButton = QtWidgets.QPushButton(ClientPrivateChatWidget)
        self.PrivateSendButton.setGeometry(QtCore.QRect(360, 620, 88, 51))
        self.PrivateSendButton.setObjectName("PrivateSendButton")
        self.DestinationLabel = QtWidgets.QLabel(ClientPrivateChatWidget)
        self.DestinationLabel.setGeometry(QtCore.QRect(70, 10, 211, 27))
        self.DestinationLabel.setTextFormat(QtCore.Qt.AutoText)
        self.DestinationLabel.setObjectName("destinationLabel")
        self.DestinationNameLineEdit = QtWidgets.QLineEdit(ClientPrivateChatWidget)
        self.DestinationNameLineEdit.setGeometry(QtCore.QRect(180, 10, 211, 27))
        self.DestinationNameLineEdit.setObjectName("DestinationNameLineEdit")

        self.retranslateUi(ClientPrivateChatWidget)
        QtCore.QMetaObject.connectSlotsByName(ClientPrivateChatWidget)

        ##
        self.DestinationNameLineEdit.setReadOnly(True)

        self.mainSignal = "<<<??!main!??>>>"

        self.sourceMail = sourceMail
        self.destinationClient = destinationClient

        self.stopEvent = Event()

        self.DestinationNameLineEdit.setText(self.destinationClient[1] + " " + self.destinationClient[2])

        self.PrivateSendButton.clicked.connect(self.sendMessage)

        self.signalHandler = SignalHandler()
        self.signalHandler.private_list_signal.connect(self.addItemToChat)

        # self.handlingThread = Thread(target=self.receiveHandler, args=())
        # self.handlingThread.start()

        self.stayAliveThread = Thread(target=self.stayAlive, args=())
        self.stayAliveThread.daemon = True
        self.stayAliveThread.start()
        

        

    def retranslateUi(self, ClientPrivateChatWidget):
        _translate = QtCore.QCoreApplication.translate
        ClientPrivateChatWidget.setWindowTitle(_translate("ClientPrivateChatWidget", "Client Private Chat"))
        self.PrivateSendButton.setText(_translate("ClientPrivateChatWidget", "Send"))
        self.DestinationLabel.setText(_translate("ClientPrivateChatWidget", "Chatting With: "))

    
    def addItemToChat(self, item :str):
        
        listItem = QtWidgets.QListWidgetItem(item)
        self.PrivateListWidget.addItem(listItem)


    def sendMessage(self):

        message = self.mainSignal + " " + "private" + " " + self.sourceMail + " " + self.destinationClient[0] + " "

        message += self.PrivateTextEdit.toPlainText()

        hppn = False
        while(hppn == False):
            hppn = asyncio.run(StaticHandling.sendBufferChange(message))

        self.PrivateTextEdit.clear()


    def receiveHandler(self):
            
            response = StaticHandling.recvBuffer.decode('utf-8')
            response = response.split(' ')
            
            print("ben private", response)
            if response[0] == self.mainSignal:
                print("ben private if 1")
                if response[1] == "private":
                    
                    destinationMail = response[2]
                    print("ben private if 2", response[2])
                    print("ben private if 2", self.destinationClient)

                    if destinationMail == self.destinationClient[0]:
                        print("ben private" , destinationMail)
                        message = " ".join(response[3:])
                        print("ben private",message)
                        self.signalHandler.private_list_signal.emit(message)
                        StaticHandling.recvBuffer = bytearray()
                        

    def stayAlive(self):
        while not StaticHandling.stopEvent.is_set():
            time.sleep(10)

class SignalHandler(QtCore.QObject):

    private_list_signal = QtCore.pyqtSignal(str)

